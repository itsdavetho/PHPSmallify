<?php session_start(); chdir(dirname(__FILE__)); date_default_timezone_set('America/Vancouver'); class IRCBot { protected $a; protected $b; protected $c; protected $d = array(); protected $e = array(); protected $f; protected $g = false; protected $h = ''; public function __construct(array $i = array(), $j = null) { $this->loadModules($j); if(count($i) > 0) $this->d = array_merge($i, $this->IRC_ARGS); else { $k = array('IRC_PORT' => 6667, 'IRC_NICK' => 'PHPIRCBot', 'IRC_USER' => 'PHPIRCBot', 'OWNER' => 'PHPIRCBot'); $this->d = array_merge($k, $this->IRC_ARGS); } } public function start() { $this->a = @fsockopen($this->getArg('IRC_SERVER'), intval($this->getArg('IRC_PORT')), $l, $m); $this->sendCommand('USER '.$this->getArg('IRC_USER').' 0 * ' . $this->getArg('IRC_USER')); $this->sendCommand('NICK '.$this->getArg('IRC_NICK')); while($this->IRC_SOCKET) { $this->b = fgets($this->a, 1024); $this->c = $this->parseMessage($this->IRC_DATA); ob_start(); $this->handleCommand($this->c['command']); $n = ob_get_clean(); echo $n; if($this->LOGGING_ENABLED) { $this->h .= $n; } if(substr($this->c['trail'], 0, 1) == '!') { ob_start(); $this->o = preg_replace('/(\s*)([^\s]*)(.*)/', '$2', $this->c['trail']); $this->handleModule(substr($this->o, 1)); $n = ob_get_clean(); if($this->LOGGING_ENABLED) $this->h .= $n; if(!empty($n)) { $n = explode("\n", $n); foreach($n as $p) { if(strlen(trim($p)) == 0) continue; $p = str_replace(" ", ' ', $p); if($this->c['isPM'] == true) $this->sendCommand('PRIVMSG ' . $this->c['username'] . ' :' . $p); else $this->sendMessage($p); } } } if($this->LOGGING_ENABLED) $this->pushLog(); } } public function stop() { $this->a = null; $this->b = null; $this->c = null; $this->o = null; } public function getResultSet() { return $this->c; } public function sendCommand($q) { if(!$this->IRC_SOCKET) Throw new Exception('No connection opened'); fwrite($this->a, $q . "\r\n"); fflush($this->IRC_SOCKET); return true; } public function sendMessage($r, $s = false) { if($s == false) $s = $this->c['args']; $this->sendCommand('PRIVMSG ' . $s . ' :' . $r); } public function parseMessage($t) { preg_match('/^(?:[:@]([^\\s]+) )?([^\\s]+)(?: ((?:[^:\\s][^\\s]* ?)*))?(?: ?:(.*))?$/', $t, $i); if(isset($i[1])) if(strrpos($i[1], '!')) $u = substr($i[1], 0, strrpos($i[1], '!')); else $u = $i[1]; else $u = ''; if(isset($i[3])) $v = trim(strtolower($i[3])) == strtolower($this->d['IRC_NICK']) ? true : false; else $v = false; return array('username' => $u, 'command' => isset($i[2]) ? $i[2] : '', 'trail' => isset($i[4]) ? trim($i[4]) : '', 'args' => isset($i[3]) ? $i[3] : '', 'isPM' => $v); } public function loadModules($j = null) { if(is_null($j)) $j = dirname(__FILE__) . '/modules'; else if(!is_dir($j)) Throw new Exception($j . ' is not a valid directory'); $w = glob($j . '/*.php'); foreach($w as $x) { $y = basename($x, '.php'); if(!class_exists($y)) require_once($x); else echo 'Module "'.$y.'"" already loaded!'.PHP_EOL; if(class_exists($y)) { $this->e[$y] = new $y($this); } else echo 'Module "'.$j.'/'.$y.'.php" could not be loaded! Class name must match that of the filename!' . PHP_EOL; } } public function getModules() { return $this->e; } public function handleCommand($aa) { if($a == 'PING') { $this->sendCommand('PONG ' . substr($this->b, 5)); } if(!isset($this->f[$a]) || $a == 'PING') { $bb = $this->getResultSet(); foreach($b as $cc) { if(empty($c)) { $dd = true; } else { $d = false; } } if(isset($d) && $d === false) echo '['.date('h:i').'] <'.trim($b['username']).':'.$b['command'].'> ' . trim($b['trail']) . PHP_EOL; return false; } foreach($this->f[$a] as $ee) { $e($this); } foreach($this->e as $ff => $gg) { var_dump('EVENT_' . $a); if(method_exists($g, 'EVENT_' . $a)) { $hh = 'EVENT_' . $a; $g->h($this, $this->getResultSet()); } } return true; } public function getCurrentCommand() { return $this->o; } public function handleModule($g) { if(isset($this->e[$g])) { $i = $this->c['trail']; $i = substr($i, strlen($this->CURRENT_COMMAND) + 1); $g = $this->e[$g]; $ii = array('pre_execute', 'execute', 'post_execute'); foreach($i as $jj) if(method_exists($g, $j)) $g->j($this, $i); return true; } else return false; } public function addHandler($a, closure $e) { if(!isset($this->f[$a])) $this->f[$a] = array(); $this->f[$a][] = $e; return key(end($this->EVENT_HANDLERS)); } public function removeHandler($a, $kk) { if(!isset($this->f[$a][$k])) return false; unset($this->f[$a][$k]); return true; } public function setArg($ll, $mm) { $this->d[$l] = $m; return $this->d[$l]; } public function getArg($l) { if(isset($this->d[$l])) return $this->d[$l]; return null; } public function toggleLogging() { $this->g = !$this->g; } public function pushLog() { $nn = 'logs/'.date('d-M-Y').'--log.txt'; if(!is_file($n)) file_put_contents($n, ''); file_put_contents($n, $this->h, FILE_APPEND); $this->h = ''; } public function file_get_contents_2($oo) { $pp = curl_init($o); curl_setopt_array($p, array( CURLOPT_RETURNTRANSFER => true, CURLOPT_CONNECTTIMEOUT => 30, CURLOPT_TIMEOUT => 10, CURLOPT_FOLLOWLOCATION => true, CURLOPT_HEADER => true, CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 6.1; rv:16.0) Gecko/20100101 Firefox/16.0', CURLOPT_REFERER => $o ) ); $qq = curl_exec($p); return $q; } } ?> 